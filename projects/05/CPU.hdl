// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M 값 입력 (M = RAM[A] 의 내용)
        instruction[16], // 실행을 위한 명령어
        reset;           // 현재 프로그램을 재시작할지 (reset = 1)
                         // 실행을 계속할지 (reset = 0)
                         // 나타내는 신호.

    OUT outM[16],        // M 값 출력
        writeM,          // M 에 쓸지 여부 
        addressM[15],    // 데이터 메모리에서 M의 주소
        pc[15];          // 다음 명령어의 주소

    PARTS:
    // 우선 16번째 비트값으로 a 명령어인지, b 명령어 인지 확인 (decode)
    Not(in=instruction[15], out=Ainstr);
    And(a=instruction[15], b=instruction[15], out=Cinstr);
    
    // 6번째 비트맵으로 A 레지스터에 ALU output 을 로드할지를 결정함
    And(a=Cinstr, b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=ALUoutput, sel=ALUtoA, out=inputA);
    
    // outA를 A레지스터에 넣을것인지?
    Or(a=Ainstr, b=ALUtoA, out=loadA);
    ARegister(in=inputA, load=loadA, out=outA, out[0..14]=addressM);
    
    // a 비트 (13번째 비트) 를 사용해 A 또는 M[A]를 사용할지를 결정
    // 연산자로서.
    Mux16(a=outA, b=inM, sel=instruction[12], out=AM);
    
    // 만약 C 명령어라면 5번째 비트로 ALU 결과값을 D 레지스터를 로드함 
    And(a=Cinstr, b=instruction[4], out=loadD);
    DRegister(in=ALUoutput, load=loadD, out=D);
    
    // ALU는 c1~c6 비트를 이용해 A 레지스터 또는 메모리, D레지스터를 연산함 
    ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9],
    ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, out=outM,
    zr=zr, ng=ng);
    
    // C 명령어의 d3 비트의 값을 M 에 저장할지 말지를 결정함
    And(a=Cinstr, b=instruction[3], out=writeM);
    
    // 이때 우리는 CPU 에서 PC (프로그램 카운터) 를 다룰 수 있는데, 
    // ALU 출력 값중 zr 과 ng 를 통해 jump를 할지 말지를 결정한다. 
    
    // 만약 ALU output == 0 이고 j2 비트가 1 이라면, 우리는 점프해야한다. (JEQ)
    And(a=zr, b=instruction[1], out=JEQ);
    // 만약 ALU output < 0  이고 j3 비트가 1 이라면 우리는 점프해야한다. (JLT)
    And(a=ng, b=instruction[2], out=JLT);
    // JLE = Or(JEQ, JLT)
    Or(a=JEQ, b=JLT, out=JLE);
    // ALU output > 0 이라면
    Or(a=zr, b=ng, out=notpos);
    Not(in=notpos, out=greaterThanZero);
    // 만약 ALU output > 0 이고 j1 비트 == 1 이라면, 우리는 점프해야한다 (JGT)
    And(a=greaterThanZero, b=instruction[0], out=JGT);
    // JGE = Or(JEQ, JGT)
    Or(a=JEQ, b=JGT, out=JGE);
    // JNE = (!zr)&(j2==0)
    Not(in=zr, out=notzr);
    Not(in=instruction[1], out=notj1);
    And(a=notzr, b=notj1, out=JNE);
    // JUMP
    Or(a=JLE, b=JGT, out=JUMP);
    And(a=Cinstr, b=JUMP, out=loadPC);
    // 만약 로드 안한다면 pc 값이 증가한다.
    Not(in=loadPC, out=IncPC);
    
    // 마침내 PC 를 업데이트한다.
    PC(in=outA, inc=IncPC, load=loadPC, reset=reset, out[0..14]=pc);    
    
    // 끝~~
}