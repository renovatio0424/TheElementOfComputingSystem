// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // fitstly we decode the instruction and get its type
    Not(in=instruction[15], out=Ainstr);
    And(a=instruction[15], b=instruction[15], out=Cinstr);
    
    // use instruction[5] to determine whether should load A register with ALU output
    And(a=Cinstr, b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=ALUoutput, sel=ALUtoA, out=inputA);
    
    // Should put outA into Aregister?
    Or(a=Ainstr, b=ALUtoA, out=loadA);
    ARegister(in=inputA, load=loadA, out=outA, out[0..14]=addressM);
    
    // use instruction[12](i.e. a-bit) to determine whether we use the A or M[A] 
    // as operator.
    Mux16(a=outA, b=inM, sel=instruction[12], out=AM);
    
    // use instruction[4] (if it is C-instruction) to determine: should load D-resister
    // with the value of ALUoutput.
    And(a=Cinstr, b=instruction[4], out=loadD);
    DRegister(in=ALUoutput, load=loadD, out=D);
    
    // ALU uses A/M and D to compute, use instruction c1...c6 bits
    ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9],
    ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, out=outM,
    zr=zr, ng=ng);
    
    // Then we should tackle 'writeM', set it to 0 or 1 using C-instruction d3-bit
    And(a=Cinstr, b=instruction[3], out=writeM);
    
    // Then we can tackle 'PC part' in CPU. Use the zr and ng from ALU output, we 
    // determine whether jump or not
    
    //  if ALUoutput ==0 and j2 bit equals to 1, we should jump
    And(a=zr, b=instruction[1], out=JEQ);
    //  if ALUoutput<0 and j3 bit equals to 1, we should jump
    And(a=ng, b=instruction[2], out=JLT);
    // JLE = Or(JEQ, JLT)
    Or(a=JEQ, b=JLT, out=JLE);
    // get whether ALU output is greater than 0
    Or(a=zr, b=ng, out=notpos);
    Not(in=notpos, out=greaterThanZero);
    // if ALUoutput>0 and j1 bit equals to 1, we should jump
    And(a=greaterThanZero, b=instruction[0], out=JGT);
    // JGE = Or(JEQ, JGT)
    Or(a=JEQ, b=JGT, out=JGE);
    // JNE = (!zr)&(j2==0)
    Not(in=zr, out=notzr);
    Not(in=instruction[1], out=notj1);
    And(a=notzr, b=notj1, out=JNE);
    // JUMP
    Or(a=JLE, b=JGT, out=JUMP);
    And(a=Cinstr, b=JUMP, out=loadPC);
    // if not load, then Inc
    Not(in=loadPC, out=IncPC);
    
    //finally we update PC 
    PC(in=outA, inc=IncPC, load=loadPC, reset=reset, out[0..14]=pc);    
    
    // Job done! Such a huge project!
}