// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Memory consists of RAM16K, SCREEN and Keyboard, which is 16K, 8K, 1 respectively.
	// Memory has 15-bit address space from 0-0x60000, Ram16K has 14-bit address space // from 0-0x3FFF, so if the 15th bit of memory address -- address[14] -- equals to
	// 0, it denotes RAM16K. And if address[14]==1, it says the address is >= 0x4000,
	// which is the address of screen and keyboard. 
	// In same method, we know that if address[13]==0, we choose screen, and if address
	// [13]==1, we choose KBD.
	// *** Thus we have : choose RAM if address[13..14] == [0,0] or [0,1]
	// ***                choose screen if address[13..14] == [1,0]
	// ***                choose KBD if addrss[13..14] == [1,1]
	
	
	// select between RAM16K and IO devices
	DMux4Way(in=load, sel[0]=address[13], sel[1]=address[14], a=loadRAM16K1, b=loadRAM16K2, c=loadSCREEN, d=loadKBD);
	
	// RAM16K output
	RAM16K(in=in, load=loadRAM16K1, address=address[0..13], out=outRAM16K1);
	RAM16K(in=in, load=loadRAM16K2, address=address[0..13], out=outRAM16K2);

	
	// SCREEN and KBD outputs
	Screen(in=in, load=loadSCREEN, address=address[0..12], out=outSCREEN);
	Keyboard(out=outKBD);
	
	// select out from RAM16K and IO devices, if address[14]==1, we choose RAM
	Mux4Way16(a=outRAM16K1, b=outRAM16K2, c=outSCREEN, d=outKBD, sel=address[13..14], out=out);
}